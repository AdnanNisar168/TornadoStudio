After installing the `Microsoft.AspNet.WebApi.Cors` package in your ASP.NET Web API project, you need to configure CORS settings to allow specific origins to access your API. Follow these steps to set up CORS in your ASP.NET Web API project:

1. **Import the Necessary Namespaces**:

   In your Web API controllers or WebApiConfig.cs file, make sure you import the necessary namespaces:

   ```csharp
   using System.Web.Http;
   using System.Web.Http.Cors;
   ```

2. **Enable and Configure CORS**:

   In your `WebApiConfig.cs` file, you can configure CORS settings. You should configure your application to allow specific origins to access your API. Here's an example:

   ```csharp
   using System.Web.Http;

   public static class WebApiConfig
   {
       public static void Register(HttpConfiguration config)
       {
           // Enable CORS globally for all controllers
           config.EnableCors();

           // Configure CORS to allow requests from specific origins
           var cors = new EnableCorsAttribute("http://your-angular-app-url", "*", "*");
           config.EnableCors(cors);

           // Other Web API configuration settings
           // ...
       }
   }
   ```

   Replace `"http://your-angular-app-url"` with the actual URL of your Angular application. The `*` in the second and third parameters allows any HTTP method and any header to be accepted. You can customize these values as needed.

3. **Decorate Controllers or Actions with `[EnableCors]` Attribute** (Optional):

   If you want to apply CORS settings to specific controllers or actions, you can decorate them with the `[EnableCors]` attribute:

   ```csharp
   using System.Web.Http;
   using System.Web.Http.Cors;

   [EnableCors(origins: "http://your-angular-app-url", headers: "*", methods: "*")]
   public class YourController : ApiController
   {
       // Controller actions
   }
   ```

   This allows you to have more fine-grained control over CORS settings on a per-controller or per-action basis.

4. **Testing**:

   After making these changes, your ASP.NET Web API should be configured to allow requests from the specified origins (your Angular app). You can test your API by making requests from your Angular application.

Please ensure that you properly configure CORS settings to match your application's security requirements, and only allow trusted origins to access your API. Security considerations are crucial when configuring CORS to avoid potential security vulnerabilities.