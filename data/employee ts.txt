import { Component, OnInit, QueryList, ViewChildren, ElementRef } from '@angular/core';
import { FormBuilder, FormGroup, FormControl, Validators, FormArray } from '@angular/forms';
import { Router, ActivatedRoute, Params } from '@angular/router';
import { catchError } from 'rxjs/operators'
import { forkJoin, of } from 'rxjs';
import createNumberMask from 'text-mask-addons/dist/createNumberMask';
import * as moment from 'moment';createNumberMask
import Swal from 'sweetalert2';

import { CommonComponent } from 'src/app/common/common.component';
import { CommonService } from 'src/app/services/common.service';
import { LoginInfo } from '../../models/loginInfo';
import { Employee } from '../models/employeeList';
import { InventoryService } from 'src/app/services/inventory.service';
import { HRService } from 'src/app/services/hr.service';
import { Menu } from 'src/app/models/menu';
import { Menus } from 'src/app/models/common';
import { Dropdown } from 'src/app/models/dropdown';


@Component({
    selector: 'app-employee',
    templateUrl: './employee.component.html',
})
export class EmployeeComponent extends CommonComponent implements OnInit {

    public mask = ['(', /[1-9]/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/, /\d/];
    numberMask = createNumberMask({
        allowDecimal: true,
        decimalLimit: 2,
        prefix: '',
        suffix: '' // This will put the dollar sign at the end, with a space.
    });
    public employeeID: number;
    public employee: Employee = new Employee();
    employeeformGroup: FormGroup;
    public UpdatedByName: string;
    public UpdatedOn: string;
    public autoNumber: string;
    public isAutoNumberEnabled: boolean;
    public menuId: number ;
    public menu: Menu = new Menu();
    public departments: Dropdown[];

    //Different Secreens
    public isOrderBooker: boolean;
    public isPartyManager: boolean;
    public isSalesman: boolean;
    public isEmployee: boolean;
    public employeeType: number;

    // App Settings
    private IsEditAllowed: boolean;
    private IsCreateAllowed: boolean;
    public loginInfo: LoginInfo;
    setAppSettings() {
        this.IsEditAllowed = true;
        this.IsCreateAllowed = true;
    }

    constructor(private route: ActivatedRoute, private router: Router, private fb: FormBuilder, private inventoryService: InventoryService, private hrService: HRService, private commonService: CommonService, private el: ElementRef) {
        super();

        

        if (window.location.href.indexOf('salesman') >= 0) {
            this.menuId = Menus.Salesman;
            this.employeeType = 1;
        }else
        if (window.location.href.indexOf('orderbooker') >= 0) {
            this.menuId = Menus.OrderBooker;
            this.employeeType = 2;
        }else
        if (window.location.href.indexOf('partymanager') >= 0) {
            this.menuId = Menus.PartyManager;
            this.employeeType = 3;
        }else
        if (window.location.href.indexOf('employee') >= 0) {
            this.menuId = Menus.Employee;
            this.employeeType = 4;
        }

        this.employeeID = this.route.snapshot.params["id"] || 0;

        this.employeeformGroup = this.fb.group({
            EmployeeID: [0],
            EmployeeCode: [''],
            EmployeeName: [''],
            SalesComission:[''],
            Phone: [''],
            DepartmentID: [''],
            DepartmentName: [''],
            City: [''],
            IsActive: ['true'],
            Email: [''],
            Address: [''],
            EmployeeTypeID: [0],
            EmployeeType: this.employeeType,
            AutoNumber: [''],
        });

    }

    ngOnInit() {
        var self = this;
        this.commonService.showSpinner('Loading...');

        forkJoin([
            self.commonService.getLoginInfo().pipe(catchError(error => of(error))),
            self.hrService.getEmployeeNewNumber(self.employeeformGroup.value.EmployeeType).pipe(catchError(error => of(error))),
            self.commonService.getMenu().pipe(catchError(error => of(error))), 
            self.hrService.getDepartmentsDropdown().pipe(catchError(error => of(error))),
        ])
            .subscribe(data => {
                self.loginInfo = data[0];
                this.autoNumber = data[1];
                const menus = data[2];
                self.menu = self.commonService.findMenu(self.menuId, menus);
                this.departments = data[3];
                self.loadData();
            });
    }

    
    loadData() {
        var self = this;


        if (this.employeeID) {
            self.hrService.getEmployee(self.employeeID).subscribe(data => {
                self.employee = data;

                self.employeeformGroup.patchValue({
                    'EmployeeID': self.employee.EmployeeID,
                    'EmployeeCode': self.employee.EmployeeCode,
                    'EmployeeName': self.employee.EmployeeName,
                    'SalesComission': self.employee.SalesComission,
                    'Phone': self.employee.Phone,
                    'DepartmentName': self.employee.DepartmentName,
                    'DepartmentID': self.employee.DepartmentID,
                    'City': self.employee.City,
                    'IsActive': self.employee.IsActive,
                    'Email': self.employee.Email,
                    'Address': self.employee.Address,
                    'EmployeeTypeID': self.employee.EmployeeTypeID,
                    'EmployeeTypeName': self.employee.EmployeeTypeName,
                    'EmployeeType': self.employee.EmployeeType,

                });

                //this.UpdatedByName = self.gender.UpdatedByName;
                //this.UpdatedOn = moment(self.gender.UpdatedOn).format("DD-MMM-YYYY hh:mm A");
                self.commonService.hideSpinner();
            });
        } else {
            self.employee = new Employee();
            self.employee.UpdatedOn = new Date();
            self.employee.UpdatedByName = self.loginInfo.ImpersonateUser.UserName;
            self.commonService.hideSpinner();

            //Auto Number
            // self.hrService.newEmployeAutoNumber().pipe(catchError(error => of(error))).subscribe(data => {
            //     self.autoNumber = data;
            //     self.employeeformGroup.patchValue({EmployeeCode: self.autoNumber});
            // });
        }
    }

    onSubmit() {
        this.commonService.showSpinner(null);

        this.employeeformGroup.value.SalesComission = this.commonService.parseNumber(this.employeeformGroup.value.SalesComission)

        this.hrService.saveEmployee(this.employeeformGroup.value).subscribe(res => {
            this.commonService.hideSpinner();

            let message = res.message;
            // ERROR MESSAGE
            if (res.http_code != 200) {
                res.broken_rules.forEach(x => {
                    message += '<br>' + x;
                });
            }

            Swal({
                title: 'Save Message',
                html: message,
                type: (res.http_code == 200 ? 'success' : 'error'),
            }).then(result => {
                if (res.http_code == 200) {
                    if(this.menuId == Menus.Salesman){
                        this.router.navigate(['/hr/salesman/list']);
                    }else
                    if(this.menuId == Menus.OrderBooker){
                        this.router.navigate(['/hr/orderbooker/list']);
                    }else
                    if(this.menuId == Menus.PartyManager){
                        this.router.navigate(['/hr/partymanager/list']);
                    }else
                   if(this.menuId == Menus.Employee){
                        this.router.navigate(['/hr/employee/list']);
                    }
                }
            });
        });
    }

    compareFn(c1: any, c2: any): boolean {
        return c1 && c2 ? c1 == c2 : false;
    }

}
