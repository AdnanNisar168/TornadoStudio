import { Component, OnInit, ElementRef } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { catchError } from 'rxjs/operators'
import { forkJoin, of } from 'rxjs';
import Swal from 'sweetalert2';

import { CommonComponent } from '../../common/common.component';
import { CommonService } from '../../services/common.service';
import { LoginInfo } from '../../models/loginInfo';
import { Gender } from '../models/gender';
import { InventoryService } from '../../services/inventory.service';



@Component({
    selector: 'app-gender',
    templateUrl: './gender.component.html',
})
export class GenderComponent extends CommonComponent implements OnInit {

    public mask = ['(', /[1-9]/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/, /\d/];

    private genderID: number;
    public gender: Gender = new Gender();
    formGroup: FormGroup;
    public UpdatedByName: string;
    public UpdatedOn: string;


    // App Settings
    public IsEditAllowed: boolean;
    public IsCreateAllowed: boolean;
    public loginInfo: LoginInfo;
    setAppSettings() {
        this.IsEditAllowed = true;
        this.IsCreateAllowed = true;
    }

    constructor(private route: ActivatedRoute, private router: Router, private fb: FormBuilder, private inventoryService: InventoryService, private commonService: CommonService, private el: ElementRef) {
        super();

        this.genderID = this.route.snapshot.params["id"];

        this.formGroup = this.fb.group({
            GenderID: [0],
            GenderCode: [''],
            GenderName: [''],
        });
      
    }

    ngOnInit() {
        var self = this;
        this.commonService.showSpinner('Loading...');

        forkJoin([
            self.commonService.getLoginInfo().pipe(catchError(error => of(error))),
        ])        
        .subscribe(data => {
            self.loginInfo = data[0];
            self.loadData();
        });



    }

    loadData() {
        var self = this;

        if (this.genderID) {
            self.inventoryService.getGender(self.genderID).subscribe(data => {
                self.gender = data;

                self.formGroup.patchValue({
                    'GenderID': self.gender.GenderID,
                    'GenderCode': self.gender.GenderCode,
                    'GenderName': self.gender.GenderName,
                });

                self.commonService.hideSpinner();
            });
    } else {
            self.gender = new Gender();
            self.gender.UpdatedOn = new Date();
            self.gender.UpdatedByName = this.loginInfo.ImpersonateUser.UserName;
            self.commonService.hideSpinner();
        }
    }

    onSubmit() {
        this.commonService.showSpinner(null);

        this.inventoryService.saveGender(this.formGroup.value).subscribe(res => {
            this.commonService.hideSpinner();

            let message = res.message;
            // ERROR MESSAGE
            if (res.http_code != 200) {
                res.broken_rules.forEach(x => {
                    message += '<br>' + x;
                });
            }

            Swal({
                title: 'Save Message',
                html: message,
                type: (res.http_code == 200 ? 'success' : 'error'),
        }).then(result => {
                if (res.http_code == 200) {
                    this.router.navigate(['/inventory/gender/list']);
                }
            });
        });
    }

    compareFn(c1: any, c2: any): boolean {
        return c1 && c2 ? c1 == c2 : false;
    }

}
